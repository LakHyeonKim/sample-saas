---
description: 
globs: 
alwaysApply: false
---
# SaaS template Convention

## Building blocks

1. src/app/**/page.tsx: Next.js page component. always define as `export default function Page`. ref: [page.tsx](mdc:src/app/auth/login/page.tsx)
2. src/app/api/**/route.tsx: Next.js API route. Access database by `createPureClient` from [server.ts](mdc:src/lib/supabase/server.ts). always return response for `data` property. ref: [route.ts](mdc:src/app/api/auth/register/route.ts)
3. src/app/dashboard/[workspaceId]/**/*: admin pages (login required)
4. src/components/ui/*: shadcn-ui components
5. src/components/layout/*: common layout components (header, footer, sidebar, ...)
6. src/components/templates/*: Template components. used in Next.js Layout components
7. src/features/[featureName]/**/*: components/hooks/api/schema for specific feature/page (auth, dashboard, landing, team, profile, ...)
8. src/features/[featureName]/schema.ts: zod schema file for api request body, response schema. used in client component, api route both. ref: [schema.ts](mdc:src/features/auth/schema.ts)
9. src/features/[featureName]/api.ts: api request function. used in client component. internally use createMainClinet from [client.ts](mdc:src/lib/remote/main/client.ts). ref: [api.ts](mdc:src/features/auth/api.ts)
10. src/features/[featureName]/pages/*: page components. imported by Next.js page component. ref: [LoginPage.tsx](mdc:src/features/auth/pages/LoginPage.tsx)\
11. src/features/[featureName]/queries/*: react query hook. internally use api.ts request function (e.g. `useProducts`)

## Must

- use [admin-page.tsx](mdc:src/components/templates/admin-page.tsx) for admin page components.
- define all api request function in src/features/[featureName]/api.ts. Do not use `fetch`.
- define all request, form schema in src/features/[featureName]/schema.ts
- use pnpm
- define all api query hook in src/features/[featureName]/queries. Do not use `useState`, `useEffect` for api state management.
- For api route authentication, use decodeAuthToken from [utils.ts](mdc:src/lib/utils.ts). ref: [route.ts](mdc:src/app/api/products/route.ts)

## Process

1. 작업할 기능에 대해, src/features 경로에 적절한 [featureName]으로 폴더가 존재하는지 찾는다. 없다면 추가한다.
2. API 요청이 필요한 작업이라면, [featureName] 폴더에 적절한 api.ts, schema.ts가 추가되었으며 api route가 추가되었는지 파악한다. 없다면 생성한다.
3. [featureName] 의 components 폴더에 적절히 client component를 추가/수정한다. pages 폴더의 page component도 적절히 작업한다.
4. 필요시 Next.js page component를 추가한다.